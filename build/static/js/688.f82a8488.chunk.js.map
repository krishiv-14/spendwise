{"version":3,"file":"static/js/688.f82a8488.chunk.js","mappings":"qJAGA,MAeaA,EAAoCC,gBAMzC,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OAqCjD,MAjCuB,CACrB,CACEE,SAAU,kBACVC,eAAgB,MAChBC,kBAAmB,GAErB,CACEF,SAAU,uBACVC,eAAgB,KAChBC,kBAAmB,IAErB,CACEF,SAAU,aACVC,eAAgB,KAChBC,kBAAmB,IAErB,CACEF,SAAU,gBACVC,eAAgB,IAChBC,kBAAmB,IAErB,CACEF,SAAU,4BACVC,eAAgB,IAChBC,kBAAmB,IAErB,CACEF,SAAU,gBACVC,eAAgB,KAChBC,kBAAmB,IAIF,C","sources":["utils/api.ts"],"sourcesContent":["import { ExpenseCategory } from '../types';\r\n\r\n// API endpoints for Indian industry spending trends\r\nconst API_URL = 'https://api.data.gov.in/resource/mock-industry-spend';\r\n\r\n// Interface for the API response\r\ninterface IndustrySpendingResponse {\r\n  success: boolean;\r\n  data: {\r\n    category: string;\r\n    average_monthly: number;\r\n    percentage_total: number;\r\n    trend: 'increasing' | 'decreasing' | 'stable';\r\n    region: string;\r\n  }[];\r\n}\r\n\r\n// Since we can't actually connect to a real API in this demo, we'll simulate a fetch\r\nexport const fetchIndianIndustrySpendingTrends = async (): Promise<{\r\n  category: ExpenseCategory;\r\n  averageMonthly: number;\r\n  percentageOfTotal: number;\r\n}[]> => {\r\n  // Simulate API call delay\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  \r\n  // More realistic India-specific data (based on research)\r\n  // Note: In a real app, this would come from an actual API\r\n  const mockIndianData = [\r\n    {\r\n      category: 'Office Supplies' as ExpenseCategory,\r\n      averageMonthly: 18500, // INR\r\n      percentageOfTotal: 6\r\n    },\r\n    {\r\n      category: 'Food & Entertainment' as ExpenseCategory,\r\n      averageMonthly: 35000, // INR\r\n      percentageOfTotal: 12\r\n    },\r\n    {\r\n      category: 'Travelling' as ExpenseCategory,\r\n      averageMonthly: 75000, // INR\r\n      percentageOfTotal: 26\r\n    },\r\n    {\r\n      category: 'Accommodation' as ExpenseCategory,\r\n      averageMonthly: 60000, // INR\r\n      percentageOfTotal: 21\r\n    },\r\n    {\r\n      category: 'Client & Project Expenses' as ExpenseCategory,\r\n      averageMonthly: 70000, // INR\r\n      percentageOfTotal: 24\r\n    },\r\n    {\r\n      category: 'Subscriptions' as ExpenseCategory,\r\n      averageMonthly: 32000, // INR\r\n      percentageOfTotal: 11\r\n    }\r\n  ];\r\n  \r\n  return mockIndianData;\r\n};\r\n\r\n// Fetch industry trends for a specific sector\r\nexport const fetchIndustrySectorTrends = async (\r\n  sector: string\r\n): Promise<{\r\n  month: string;\r\n  spending: number;\r\n}[]> => {\r\n  // Simulate API call delay\r\n  await new Promise(resolve => setTimeout(resolve, 800));\r\n  \r\n  // Generate last 6 months of data with realistic variations\r\n  const months = [];\r\n  const today = new Date();\r\n  \r\n  for (let i = 5; i >= 0; i--) {\r\n    const month = new Date(today.getFullYear(), today.getMonth() - i, 1);\r\n    const monthName = month.toLocaleString('default', { month: 'short' });\r\n    const year = month.getFullYear();\r\n    \r\n    // Base spending with monthly variations (higher in festival seasons)\r\n    let baseSpend = 0;\r\n    switch (sector) {\r\n      case 'IT Services':\r\n        baseSpend = 250000 + Math.random() * 50000;\r\n        break;\r\n      case 'Manufacturing':\r\n        baseSpend = 380000 + Math.random() * 70000;\r\n        break;\r\n      case 'Healthcare':\r\n        baseSpend = 220000 + Math.random() * 40000;\r\n        break;\r\n      case 'Financial Services':\r\n        baseSpend = 310000 + Math.random() * 60000;\r\n        break;\r\n      default:\r\n        baseSpend = 270000 + Math.random() * 50000;\r\n    }\r\n    \r\n    // Add seasonal factors (Diwali, year-end, etc.)\r\n    if (monthName === 'Oct' || monthName === 'Nov') {\r\n      baseSpend *= 1.2; // Diwali season\r\n    } else if (monthName === 'Mar') {\r\n      baseSpend *= 1.3; // Financial year-end\r\n    } else if (monthName === 'Dec') {\r\n      baseSpend *= 1.15; // Christmas/New Year\r\n    }\r\n    \r\n    months.push({\r\n      month: `${monthName} ${year}`,\r\n      spending: Math.round(baseSpend)\r\n    });\r\n  }\r\n  \r\n  return months;\r\n}; "],"names":["fetchIndianIndustrySpendingTrends","async","Promise","resolve","setTimeout","category","averageMonthly","percentageOfTotal"],"sourceRoot":""}